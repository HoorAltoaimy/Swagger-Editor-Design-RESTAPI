openapi: 3.0.0

info:
  version: 1.0.0
  title: E-commerce API
  description: API for e-comerce platform
  contact:
    email: hooraltoaimy@gmail.com
    
servers:
  - url: http://localhost:3001

tags:
  - name: products
    description: everything about products
  - name: users
    description: everything about users
  - name: orders
    description: everything about orders
  - name: categories
    description: everything about categories
       
components:
  schemas:
    Product:
      type: object
      required:
        - name
        - image
        - description
        - categories
        - variants
        - sizes
        - price
      properties:
        id: 
          type: number
          description: the id of the product will be automatically generated in the backend
        name: 
          type: string
          description: the title of the product
        image: 
          type: string
          description: the url of the product image
        description: 
          type: string
          description: the description of the product
        categories: 
          type: array
          items:
            type: number
          description: the categories of the product
        variants: 
          type: array
          items:
            type: string
          description: the variants of the product
        sizes: 
          type: array
          items:
            type: string
          description: the sizes of the product
        price: 
          type: number
          description: the price of the product       
      example:
        id: 1
        name: Laptop
        image: https://m.media-amazon.com/images/I/81KoSSAwH2L._SL1500_.jpg
        description: High-performance laptop for all your needs.
        categories: [1, 2]
        variants: [8GB RAM, 16GB RAM]
        sizes: [13-inch, 15-inch]
        price: 1300
          
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - role
        - isBlocked
      properties:
        id: 
          type: number
          description: the id of the user will be automatically generated in the backend
        firstName: 
          type: string
          description: the first name of the user
        lastName: 
          type: string
          description: the last name of the user
        email: 
          type: string
          description: the email of the user
        password: 
          type: string
          description: the password of the user
        role: 
          type: string
          description: the role of the user
        isBlocked: 
          type: boolean
          description: the status of the user
      example:
        id: 4,
        firstName: hoor
        lastName: altoaimy
        email: ht@gmail.com
        password: hoor123
        role: user
        isBlocked: false
        
    Order:
      type: object
      required:
        - productId
        - userId
        - purchasedAt
      properties:
        id: 
          type: number
          description: the id of the order will be automatically generated in the backend
        productId: 
          type: number
          description: the product id
        userId: 
          type: number
          description: the user id
        purchasedAt: 
          type: string
          description: the date of making this order
      example:
        id: 1
        productId: 1
        userId: 1
        purchasedAt: 2023-09-18T10:00:00
      
    Category:
      type: object
      required:
        - name
      properties:
        id: 
          type: number
          description: the id of the category will be automatically generated in the backend
        name: 
          type: string
          description: name of the category
      example:
        id: 1
        name: Electronics
 
paths:
  /products: 
    get:
      tags:
        - products
      summary: get a list of products 
      responses:
        200:
          description: all products are returned
          content:
            application/json:
              schema:
                type: array 
                items: 
                  $ref: '#/components/schemas/Product'
        500:
          description: server error
          
    post:
      tags:
        - products
      summary: create a product
      requestBody: 
        content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'
      responses:
        201: 
          description: single product is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'
        500:
          description: server error
          
  /products/{productId}: 
    get:
      tags:
        - products
      summary: get a single product
      parameters: 
        - in: path  
          name: productId
          required: true
          schema:
            type: number
      responses:
        200:
          description: prodect is rendered
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'
        500:
          description: server error
          
    delete:
      tags:
        - products
      summary: delete a single product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: number
      responses:
        200:
          description: product is deleted
        500:
          description: server error
          
    put:
      tags:
        - products
      summary: update a single product
      requestBody: 
        content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: number
      responses:
        200:
          description: product is updated
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'
        500:
          description: server error
          
  /products/searchProduct:
    get:
      tags:
        - products
      summary: search for products by the name
      parameters:
        - in: query
          name: searchProduct
          required: true
          schema:
            type: string
      responses:
        200:
          description: products are returned based on the search value
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        500:
          description: server error
          
  /users:
    get:
      tags:
        - users
      summary: get a list of users
      responses:
        200:
          description: all the users are returned
          content:
            application/json:
              schema:
                type: array 
                items: 
                  $ref: '#/components/schemas/User'
        500:
          description: server error
          
  /users/{userId}:
    delete:
      tags:
        - users
      summary: delete user by id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: number
      responses:
        200:
          description: user is deleted
        500:
          description: server error
  
  /orders:
    get:
      tags:
        - orders
      summary: list all orders
      responses:
        200:
          description: all orders are rendered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        500:
          description: server error
  
  /categories:
    get:
      tags:
        - categories
      summary: list all categories
      responses:
        200:
          description: all categories are rendered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: server error
    
    post:
      tags:
        - categories
      summary: create a category
      requestBody:
        content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
      responses:
        201:
          description: category is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
        500:
          description: server error  
 
  /categories/{categoryId}:    
    put:
      tags:
        - categories
      summary: update a single category
      requestBody:
        content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: number
      responses:
        200:
          description: category is updated
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
        500:
          description: server error  
          
    delete:
      tags:
        - categories
      summary: delete category
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: number
      responses:
        200:
          description: category is deleted
        500:
          description: server error
      